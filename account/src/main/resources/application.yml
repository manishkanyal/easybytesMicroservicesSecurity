server:
  port: 8080

spring:
  application:
    name: "accounts"
  profiles:
    active: "prod"
  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: ''
  h2:
    console:
      enabled: true
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
    show-sql: true
  sql:
    init:
      mode: always
  config:
    import: "optional:configserver:http://localhost:8071/"
  cloud:    #This property is to configure circuitbreaker with feignclient , that communicates with other microservices
    openfeign:
      circuitbreaker:
        enabled: true

management:
  endpoints:
    web:
      exposure:
        include: "*"

  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true

  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true

endpoints:
  shutdown:
    enabled: true

eureka:
  instance:
    preferIpAddress: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/

info:
  app:
    name: "accounts"
    description: "Eazy banks accounts application"
    version: "1.0.0"

logging:
  level:
    com:
      eazybytes:
        accounts: DEBUG



resilience4j.circuitbreaker:
  configs:
    default:
      slidingWindowSize: 10           #It will monitor 10 request and decide upon to open or close the circuit breaker
      permittedNumberOfCallsInHalfOpenState: 2      # allowing 2 request in half open state to check to move to open or closed state
      failureRateThreshold: 50       #If 50% (50% of 10 = 5) of request are failed then circuit will move to open state from closed state.
      waitDurationInOpenState: 10000  #it will wait for 10000 ms or 10 sec before moving to half open state to allow some traffic to monitor


resilience4j.retry:
  configs:
    default:
      maxRetryAttempts: 3
      #If we set out waitDuration too long, then our circuitBreaker timelimiter will come into play and send its own fallback method.Default value of circuitbreaker
      #Timelimiter is 1 sec.
      waitDuration: 100
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      #Here we are ignoring the NullPointerException and no retries will take place and Fallback method will run if NullPointerException is thrown
      ignoreExceptions:
        - java.lang.NullPointerException
      #In this we will are telling to only retry for given exceptions. Note use only one either ignoreException or retryExceptions
      retryExceptions:
        - java.util.concurrent.TimeoutException

#This config will work for all the type of request inside accounts microservices.
resilience4j.ratelimiter:
  configs:
    default:
      #Max amount of time a request will wait for rateLimiter to allow the request to pass(It will depend on limitRefreshPeriod) . If not allowed return with error.
      timeoutDuration: 1000
      limitRefreshPeriod: 5000    #For every 5 sec only 1 request is allowed and 1 request is allowed is set in limitForPeriod
      limitForPeriod: 1